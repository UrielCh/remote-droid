# Middleware to drop prefix
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-prefix
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  replacePathRegex:
    regex: ^/(?:[^/]+)/?(.*)
    replacement: /$1
---
# The Dynamique ingress with an exact path /list to get all nodes
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: remote-droid-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.middlewares: default-strip-prefix@kubernetescrd
spec:
  rules:
    - http:
        paths:
          - path: /list
            pathType: Exact
            backend:
              service:
                name: dyn-ingress-service
                port:
                  number: 8080
---
# Create a service account for dyn-ingress
apiVersion: v1
kind: ServiceAccount
metadata:
  name: dyn-ingress-account
---
# Role with all APIs used by the Dyn-Ingress script
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: dyn-ingress-account
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list", "patch"]
- apiGroups: [""] # "" indicates the core API group
  resources: ["services"]
  verbs: ["get", "watch", "list", "create", "delete", "update"]
- apiGroups: ["networking.k8s.io"] # "" indicates the core API group
  resources: ["ingresses"]
  verbs: ["get", "watch", "list", "update"]
---
# The Role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dyn-ingress-account
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: dyn-ingress-account
subjects:
- kind: ServiceAccount
  name: dyn-ingress-account
---
# Dyn-ingress Deployment, dynamically manage ingresses and services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dyn-ingress
  labels:
    app: dyn-ingress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dyn-ingress
  template:
    metadata:
      labels:
        app: dyn-ingress
    spec:
      serviceAccountName: dyn-ingress-account
      #tolerations:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - "true"
      containers:
        - name: dyn-ingress
          image: urielch/dyn-ingress:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: 128Mi
              cpu: "0.2"
          ports:
            - containerPort: 8080
          env:
            - name: APP_TAG_VALUE
              value: "remote-droid"
            - name: GENERATE_NAME
              value: "remote-droid-"
            - name: INGRESS_NAME
              value: "remote-droid-ingress"
            - name: POD_PORT
              value: "3009"
            - name: HTTP_PORT
              value: "8080"
---
# Service to list nodename having valid pods
apiVersion: v1
kind: Service
metadata:
  name: dyn-ingress-service
spec:
  type: ClusterIP
  selector:
    app: dyn-ingress
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
